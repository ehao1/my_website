{"version":3,"sources":["ProjFunc.js","AboutFunc.js","App.js","serviceWorker.js","index.js"],"names":["ProjFunc","info","className","name","description","AboutFunc","par1","par2","App","React","useState","about","setAbout","projects","setProjects","experiences","setExperiences","contact","setContact","a","axios","get","headers","authorization","process","responseProject","responseExperience","responseContact","responseAbout","data","records","useEffect","fetchData","class","href","id","map","record","key","fields","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7736a00.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//though called ProjFunc, it just generates the text box :)\nexport default function ProjFunc({ info }) {\n  return (\n    <div>\n        <h2 className=\"sub-header\"> {info.name}</h2>\n        <div className=\"text-item\">\n        <p>{info.description}</p>\n        </div>\n        <br></br>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\n\n//though called ProjFunc, it just generates the text box :)\nexport default function AboutFunc({ info }) {\n  return (\n    <div className=\"text-item\">\n    <p>{info.par1}</p>\n    <p>{info.par2}</p>\n    </div>\n  );\n}","import React from \"react\";\nimport \"./App.css\";\nimport ProjFunc from \"./ProjFunc.js\";\nimport axios from \"axios\";\nimport AboutFunc from \"./AboutFunc\";\n\n//do the enviornment key stuff\n//integrate images\n\n//update about\n\nfunction App() {\n  const [about, setAbout] = React.useState(null);\n  const [projects, setProjects] = React.useState(null);\n  const [experiences, setExperiences] = React.useState(null);\n  const [contact, setContact] = React.useState(null);\n\n  async function fetchData() {\n    const responseProject = await axios.get(\n      \"https://api.airtable.com/v0/appUYJORSDB0bukw7/ProjectList\",\n      {\n        headers: {\n          authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n        },\n      }\n    );\n\n    const responseExperience = await axios.get(\n      \"https://api.airtable.com/v0/appUYJORSDB0bukw7/ExperiencesList\",\n      {\n        headers: {\n          authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n        },\n      }\n    );\n\n    const responseContact = await axios.get(\n      \"https://api.airtable.com/v0/appUYJORSDB0bukw7/ContactList\",\n      {\n        headers: {\n          authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n        },\n      }\n    );\n\n    const responseAbout = await axios.get(\n      \"https://api.airtable.com/v0/appUYJORSDB0bukw7/AboutList\",\n      {\n        headers: {\n          authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n        },\n      }\n    );\n\n    setAbout(responseAbout.data.records);\n    setProjects(responseProject.data.records);\n    setExperiences(responseExperience.data.records);\n    setContact(responseContact.data.records);\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  if (!projects || !experiences || !contact || !about) {\n    return (\n      <div className=\"intro-page\" id=\"home\">\n        <div className=\"intro-box\">\n          <h3>please wait</h3>\n          <h1>loading...</h1>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    //nav bar\n    <div>\n      <div class=\"navbar\">\n        <u1 class=\"menu-area\">\n          <li>\n            <a href=\"#home\"> (-- Home</a>\n          </li>\n          <li>\n            <a> /</a>\n          </li>\n          <li>\n            <a href=\"#about\"> About</a>\n          </li>\n          <li>\n            <a> /</a>\n          </li>\n          <li>\n            <a href=\"#experiences\"> Experiences</a>\n          </li>\n          <li>\n            <a> /</a>\n          </li>\n          <li>\n            <a href=\"#projects\"> Projects</a>\n          </li>\n          <li>\n            <a> /</a>\n          </li>\n          <li>\n            <a href=\"#contact\"> Contact</a>\n          </li>\n          <li>\n            <endItem> --)</endItem>\n          </li>\n        </u1>\n      </div>\n\n      {/*Intro page */}\n      <div className=\"intro-page\" id=\"home\">\n        <div className=\"intro-box\">\n          <h3>Hey, I'm</h3>\n          <h1>Eric Hao</h1>\n        </div>\n      </div>\n\n      {/*About page */}\n      <div className=\"leftRight-container-left\" id=\"about\">\n        <div className=\"text-container-right-border\">\n          <h1 className=\"header\">About</h1>\n          {about.map((record) => (\n            <AboutFunc key={record.id} info={record.fields} />\n          ))}\n        </div>\n      </div>\n\n      {/*Experiences page */}\n      <div className=\"leftRight-container-right\" id=\"experiences\">\n        <div>\n          {/* <img src={rlImage} className=\"image-item\" alt=\"rlImage\" />\n          <img src={Geophysics} className=\"image-item\" alt=\"Geophysics\" /> */}\n        </div>\n\n        <div className=\"text-container\">\n          <h1 className=\"header\">Experiences</h1>\n          {experiences.map((record) => (\n            <ProjFunc key={record.id} info={record.fields} />\n          ))}\n        </div>\n      </div>\n\n      {/*Projects page */}\n      <div className=\"leftRight-container-left\" id=\"projects\">\n        <div className=\"text-container\">\n          <h1 className=\"header\">Projects</h1>\n          <div>\n            {projects.map((record) => (\n              <ProjFunc key={record.id} info={record.fields} />\n            ))}\n          </div>\n        </div>\n        {/* <img src={logo} className=\"image-item\" alt=\"logo\" /> */}\n      </div>\n\n      {/*Contact */}\n      <div className=\"leftRight-container-right\" id=\"contact\">\n        <div className=\"text-container-contact\">\n          <h1 className=\"header\">Contact</h1>\n          <div>\n            {contact.map((record) => (\n              <ProjFunc key={record.id} info={record.fields} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}